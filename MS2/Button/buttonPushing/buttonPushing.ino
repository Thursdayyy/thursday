
#include <Servo.h> 

#define MATCH_RUNTIME   (3L*60L*1000)  // should be ((3L*60L)*1000)
#define servoLeftPin  13
#define servoRightPin  12

#define startingPositionLeft  20
#define endPositionLeft  90

#define startingPositionRight  170
#define endPositionRight 100

static char pi[] = "\
031415926535897932384626433832795028841971693993751\
05820974944592307816406286208998628034825342117067\
98214808651328230664709384460955058223172535940812\
84811174502841027019385211055596446229489549303819\
64428810975665933446128475648233786783165271201909\
14564856692346034861045432664821339360726024914127\
37245870066063155881748815209209628292540917153643\
67892590360011330530548820466521384146951941511609\
43305727036575959195309218611738193261179310511854\
80744623799627495673518857527248912279381830119491\
29833673362440656643086021394946395224737190702179\
86094370277053921717629317675238467481846766940513\
20005681271452635608277857713427577896091736371787\
21468440901224953430146549585371050792279689258923\
54201995611212902196086403441815981362977477130996\
05187072113499999983729780499510597317328160963185\
95024459455346908302642522308253344685035261931188\
17101000313783875288658753320838142061717766914730\
35982534904287554687311595628638823537875937519577\
81857780532171226806613001927876611195909216420198\
93809525720106548586327886593615338182796823030195\
20353018529689957736225994138912497217752834791315\
15574857242454150695950829533116861727855889075098\
38175463746493931925506040092770167113900984882401\
28583616035637076601047101819429555961989467678374\
49448255379774726847104047534646208046684259069491\
29331367702898915210475216205696602405803815019351\
12533824300355876402474964732639141992726042699227\
96782354781636009341721641219924586315030286182974\
55570674983850549458858692699569092721079750930295\
53211653449872027559602364806654991198818347977535\
66369807426542527862551818417574672890977772793800\
08164706001614524919217321721477235014144197356854\
81613611573525521334757418494684385233239073941433\
34547762416862518983569485562099219222184272550254\
25688767179049460165346680498862723279178608578438\
38279679766814541009538837863609506800642251252051\
17392984896084128488626945604241965285022210661186\
30674427862203919494504712371378696095636437191728\
74677646575739624138908658326459958133904780275900";

uint32_t digit = 0;
uint32_t startTimestamp = 0;
byte cnt=0;
int speed = 0;

Servo servoLeft;
Servo servoRight;  

void servoGo(Servo *s, byte finalAngle){
   byte currentAngle = s->read();   //servo position
   if (finalAngle > currentAngle) 
   {
      for (int i = currentAngle; i < finalAngle ; i++)
      {
         s->write(i); 
          delay(speed);
      } 
    }
   else 
   {
   for (int i = currentAngle; i > finalAngle ; i--)
   {
     s->write(i); 
      delay(speed);
    } 
    }
}
    

void setup() {

  Serial.begin(9600);

  int i = 0;
  for(i = 22; i <= 33; i++)
  {
    pinMode(i, OUTPUT);
    digitalWrite(i, HIGH);
  }

   pinMode(4, OUTPUT);
   digitalWrite(4, HIGH);
   
  servoLeft.attach(servoLeftPin); 
  servoRight.attach(servoRightPin);
  
  speed = 0;

  servoGo(&servoLeft, startingPositionLeft);
  servoGo(&servoRight, startingPositionRight);
  
  delay(5000);

  //startTimestamp = millis();
  
  speed = 5;
  
  servoGo(&servoLeft, endPositionLeft);
  servoGo(&servoRight, endPositionRight);
  speed = 0;
  
  servoLeft.detach();
  servoRight.detach();

 
   digitalWrite(4, LOW);
   
  delay(10000);


  
  //press the Judge button (0)
  cnt = (pi[digit] - '0') + 22;
  digitalWrite(cnt, LOW);
  delay(100);
  digitalWrite(cnt, HIGH);
  
  delay(5000);
   
}

void loop() {

    
    //read digit
      cnt = (pi[++digit] - '0') + 22;
  
      //turn on for #ms
      digitalWrite(cnt, LOW);
      delay(100);
      
      //turn off for #ms
      digitalWrite(cnt, HIGH);
      delay(100);
    

}
